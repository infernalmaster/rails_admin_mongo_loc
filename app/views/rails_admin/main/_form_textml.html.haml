:ruby
  if field.ckeditor
    richtext = 'ckeditor'
    js_data = {
      :jspath => field.ckeditor_location ? field.ckeditor_location : field.ckeditor_base_location + "ckeditor.js",
      :base_location => field.ckeditor_base_location,
      :options => {
        :customConfig => field.ckeditor_config_js ? field.ckeditor_config_js : field.ckeditor_base_location + "config.js"
      }
    }
  elsif field.codemirror
    richtext = 'codemirror'
    js_data = {
      :csspath => field.codemirror_css_location,
      :jspath => field.codemirror_js_location,
      :options => field.codemirror_config,
      :locations => field.codemirror_assets
    }
  elsif field.bootstrap_wysihtml5
    richtext = 'bootstrap-wysihtml5'
    js_data = {
      :csspath => field.bootstrap_wysihtml5_css_location,
      :jspath => field.bootstrap_wysihtml5_js_location,
      :config_options => field.bootstrap_wysihtml5_config_options.to_json
    }
  else
    richtext = false
    js_data = {}
  end

= form.fields_for (field.name.to_s + '_translations') do |localized_field|
  - I18n.available_locales.each do |locale|
    = localized_field.label locale
    = localized_field.text_area locale.to_s, field.html_attributes.reverse_merge(:data => { :richtext => richtext, :options => js_data.to_json }).reverse_merge(value: field.value.try(:[], locale.to_s))

-#= form.localized_fields do |localized_fields|
-#  = localized_fields.label localized_fields.language
-#  = localized_fields.text_area field.method_name, field.html_attributes.reverse_merge(:data => { :richtext => richtext, :options => js_data.to_json }).reverse_merge((hdv = field.html_default_value).nil? ? { :value => field.formatted_value } : { :value => hdv })